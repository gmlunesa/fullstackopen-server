{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/phoneBookService.js","App.js","index.js"],"names":["Filter","value","onChange","PersonForm","props","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","Persons","persons","onClick","map","person","name","number","Notification","alert","Object","keys","length","className","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","showAll","setShowAll","alertMessage","setAlertMessage","useEffect","phoneBookService","personsToShow","filter","toLowerCase","includes","event","console","log","target","preventDefault","personIndex","findIndex","window","confirm","nameObject","setTimeout","catch","error","addedObject","concat","personToDelete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1582df93.chunk.js","sourcesContent":["const Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div>\r\n      Name: <input value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","const PersonForm = (props) => {\r\n  const {\r\n    onSubmit,\r\n    nameValue,\r\n    nameOnChange,\r\n    numberValue,\r\n    numberOnChange,\r\n  } = props;\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <div>\r\n        Name: <input value={nameValue} onChange={nameOnChange} />\r\n      </div>\r\n      <div>\r\n        Number: <input value={numberValue} onChange={numberOnChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">Add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","const Persons = ({ persons, onClick }) => {\r\n  return persons.map((person) => (\r\n    <p key={person.name}>\r\n      {person.name} : {person.number}&nbsp;\r\n      <button onClick={() => onClick(person)}>Delete</button>\r\n    </p>\r\n  ));\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ alert }) => {\r\n  if (Object.keys(alert).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={alert.className}>{alert.message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst add = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response);\r\n};\r\n\r\nexport default { getAll, add, update, deletePerson };\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\nimport phoneBookService from \"./services/phoneBookService\";\n\nimport \"./styles/index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n\n  const [newSearch, setNewSearch] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  const [alertMessage, setAlertMessage] = useState({});\n\n  // Define person-fetch hook\n  const personHook = () => {\n    phoneBookService.getAll().then((data) => {\n      setPersons(data);\n    });\n  };\n\n  useEffect(personHook, []);\n\n  // This function is called after clicking submit.\n  function addPerson(event) {\n    event.preventDefault();\n\n    // Find the index of the object that contains the same `name`, if any\n    const personIndex = persons.findIndex((person) => person.name === newName);\n\n    // If `name` already exists, send alert\n    if (personIndex > -1) {\n      if (\n        window.confirm(\n          `${newName} is already added to the phonebook, replace the old number with a new one?`\n        )\n      ) {\n        // Create a new object based on the found person on the `persons` array\n        const nameObject = {\n          ...persons[personIndex],\n          number: newNumber,\n        };\n\n        console.log(nameObject, persons[personIndex]);\n\n        // Update person on the server\n        // Then, update persons array on the local state\n        phoneBookService\n          .update(persons[personIndex].id, nameObject)\n          .then((response) => {\n            // Modify the object in the array that needs to be updated\n            setPersons(\n              persons.map((person) =>\n                person.name === response.name ? response : person\n              )\n            );\n\n            // Set the alert messages detail accordingly\n            setAlertMessage({\n              message: `Successfully updated ${response.name}.`,\n              className: \"success\",\n            });\n\n            // Set the timeout so the notification disappear\n            setTimeout(() => {\n              setAlertMessage({});\n            }, 5000);\n          })\n          .catch((error) => {\n            // Set the alert messages detail accordingly\n            setAlertMessage({\n              message: `Information on ${nameObject.name} has already been removed from the server.`,\n              className: \"error\",\n            });\n\n            // Set the timeout so the notification disappear\n            setTimeout(() => {\n              setAlertMessage({});\n            }, 5000);\n          });\n      }\n    } else {\n      // Create new object with the `name` and `number`\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      };\n\n      // Add new person object to the server\n      phoneBookService.add(nameObject).then((addedObject) => {\n        // Add new object to the persons array\n        setPersons(persons.concat(addedObject));\n\n        // Set the alert messages detail accordingly\n        setAlertMessage({\n          message: `Successfully added ${nameObject.name}.`,\n          className: \"success\",\n        });\n\n        // Set the timeout so the notification disappear\n        setTimeout(() => {\n          setAlertMessage({});\n        }, 5000);\n      });\n    }\n\n    // Reset values in the input boxes\n    setNewName(\"\");\n    setNewNumber(\"\");\n  }\n\n  // This function is called when there are changes in the name input\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  // This function is called when there are changes in the number input\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  // This function is called when there are changes in the search box\n  const handleSearchChange = (event) => {\n    console.log(event.target.value);\n    setNewSearch(event.target.value);\n\n    if (event.target.value === \"\") {\n      // If there is no input in the search box, show all\n      setShowAll(true);\n    } else {\n      setShowAll(false);\n    }\n  };\n\n  // Check the value of showAll\n  // If true, assign contents of person\n  // If false, filter the values that include the newSearch\n  const personsToShow = showAll\n    ? persons\n    : persons.filter((person) =>\n        person.name.toLowerCase().includes(newSearch.toLowerCase())\n      );\n\n  // This function is called when user clicks the delete button\n  const handleDeleteClick = (personToDelete) => {\n    if (window.confirm(`Delete ${personToDelete.name}?`)) {\n      // Delete the person from the server\n      phoneBookService.deletePerson(personToDelete.id).then(() => {\n        setAlertMessage({\n          message: `Successfully deleted ${personToDelete.name}.`,\n          className: \"deleted\",\n        });\n\n        // Set the timeout so the notification disappear\n        setTimeout(() => {\n          setAlertMessage({});\n        }, 5000);\n      });\n\n      // Delete the person from our local state\n      setPersons(\n        persons.filter((person) => person.name !== personToDelete.name)\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification alert={alertMessage} />\n      <Filter value={newSearch} onChange={handleSearchChange} />\n      <h2>Add a new person</h2>\n      <PersonForm\n        onSubmit={addPerson}\n        nameValue={newName}\n        nameOnChange={handleNameChange}\n        numberValue={newNumber}\n        numberOnChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} onClick={handleDeleteClick} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}